package com.jiahan.action.Dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.jiahan.action.Bean.Coffer;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Coffer".
*/
public class CofferDao extends AbstractDao<Coffer, Void> {

    public static final String TABLENAME = "Coffer";

    /**
     * Properties of entity Coffer.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Money = new Property(0, Double.class, "money", false, "MONEY");
        public final static Property Password = new Property(1, Integer.class, "password", false, "PASSWORD");
    };


    public CofferDao(DaoConfig config) {
        super(config);
    }
    
    public CofferDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"Coffer\" (" + //
                "\"MONEY\" REAL," + // 0: money
                "\"PASSWORD\" INTEGER);"); // 1: password
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"Coffer\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Coffer entity) {
        stmt.clearBindings();
 
        Double money = entity.getMoney();
        if (money != null) {
            stmt.bindDouble(1, money);
        }
 
        Integer password = entity.getPassword();
        if (password != null) {
            stmt.bindLong(2, password);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Coffer readEntity(Cursor cursor, int offset) {
        Coffer entity = new Coffer( //
            cursor.isNull(offset + 0) ? null : cursor.getDouble(offset + 0), // money
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1) // password
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Coffer entity, int offset) {
        entity.setMoney(cursor.isNull(offset + 0) ? null : cursor.getDouble(offset + 0));
        entity.setPassword(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Coffer entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Coffer entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
