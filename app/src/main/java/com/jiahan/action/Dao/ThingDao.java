package com.jiahan.action.Dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;



// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "THING".
*/
public class ThingDao extends AbstractDao<Thing, Long> {

    public static final String TABLENAME = "THING";

    /**
     * Properties of entity Thing.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Type = new Property(2, String.class, "type", false, "TYPE");
        public final static Property Time = new Property(3, String.class, "time", false, "TIME");
        public final static Property Place = new Property(4, String.class, "place", false, "PLACE");
        public final static Property Rank = new Property(5, String.class, "rank", false, "RANK");
        public final static Property Notification = new Property(6, String.class, "notification", false, "NOTIFICATION");
        public final static Property Tag = new Property(7, Integer.class, "tag", false, "TAG");
        public final static Property Summary = new Property(8, String.class, "summary", false, "SUMMARY");
        public final static Property Plan = new Property(9, String.class, "plan", false, "PLAN");
    };


    public ThingDao(DaoConfig config) {
        super(config);
    }
    
    public ThingDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"THING\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT NOT NULL ," + // 1: name
                "\"TYPE\" TEXT," + // 2: type
                "\"TIME\" TEXT," + // 3: time
                "\"PLACE\" TEXT," + // 4: place
                "\"RANK\" TEXT," + // 5: rank
                "\"NOTIFICATION\" TEXT," + // 6: notification
                "\"TAG\" INTEGER," + // 7: tag
                "\"SUMMARY\" TEXT," + // 8: summary
                "\"PLAN\" TEXT);"); // 9: plan
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"THING\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Thing entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(4, time);
        }
 
        String place = entity.getPlace();
        if (place != null) {
            stmt.bindString(5, place);
        }
 
        String rank = entity.getRank();
        if (rank != null) {
            stmt.bindString(6, rank);
        }
 
        String notification = entity.getNotification();
        if (notification != null) {
            stmt.bindString(7, notification);
        }
 
        Integer tag = entity.getTag();
        if (tag != null) {
            stmt.bindLong(8, tag);
        }
 
        String summary = entity.getSummary();
        if (summary != null) {
            stmt.bindString(9, summary);
        }
 
        String plan = entity.getPlan();
        if (plan != null) {
            stmt.bindString(10, plan);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Thing readEntity(Cursor cursor, int offset) {
        Thing entity = new Thing( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // time
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // place
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // rank
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // notification
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // tag
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // summary
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // plan
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Thing entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPlace(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRank(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setNotification(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTag(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setSummary(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPlan(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Thing entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Thing entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
