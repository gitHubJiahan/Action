package com.jiahan.action.Dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.jiahan.action.Bean.Book;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOOK".
*/
public class BookDao extends AbstractDao<Book, Long> {

    public static final String TABLENAME = "BOOK";

    /**
     * Properties of entity Book.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property StringURL = new Property(1, String.class, "StringURL", false, "STRING_URL");
        public final static Property BookName = new Property(2, String.class, "bookName", false, "BOOK_NAME");
        public final static Property Author = new Property(3, String.class, "author", false, "AUTHOR");
        public final static Property Language = new Property(4, String.class, "language", false, "LANGUAGE");
        public final static Property Introduction = new Property(5, String.class, "introduction", false, "INTRODUCTION");
        public final static Property AddTime = new Property(6, String.class, "addTime", false, "ADD_TIME");
        public final static Property Type = new Property(7, Integer.class, "type", false, "TYPE");
        public final static Property Plane = new Property(8, String.class, "plane", false, "PLANE");
        public final static Property ReadProgress = new Property(9, Integer.class, "readProgress", false, "READ_PROGRESS");
        public final static Property Tag = new Property(10, Integer.class, "tag", false, "TAG");
        public final static Property Finish = new Property(11, String.class, "finish", false, "FINISH");
    };


    public BookDao(DaoConfig config) {
        super(config);
    }
    
    public BookDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOOK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"STRING_URL\" TEXT," + // 1: StringURL
                "\"BOOK_NAME\" TEXT NOT NULL ," + // 2: bookName
                "\"AUTHOR\" TEXT," + // 3: author
                "\"LANGUAGE\" TEXT," + // 4: language
                "\"INTRODUCTION\" TEXT," + // 5: introduction
                "\"ADD_TIME\" TEXT," + // 6: addTime
                "\"TYPE\" INTEGER," + // 7: type
                "\"PLANE\" TEXT," + // 8: plane
                "\"READ_PROGRESS\" INTEGER," + // 9: readProgress
                "\"TAG\" INTEGER," + // 10: tag
                "\"FINISH\" TEXT);"); // 11: finish
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOOK\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Book entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String StringURL = entity.getStringURL();
        if (StringURL != null) {
            stmt.bindString(2, StringURL);
        }
        stmt.bindString(3, entity.getBookName());
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(4, author);
        }
 
        String language = entity.getLanguage();
        if (language != null) {
            stmt.bindString(5, language);
        }
 
        String introduction = entity.getIntroduction();
        if (introduction != null) {
            stmt.bindString(6, introduction);
        }
 
        String addTime = entity.getAddTime();
        if (addTime != null) {
            stmt.bindString(7, addTime);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(8, type);
        }
 
        String plane = entity.getPlane();
        if (plane != null) {
            stmt.bindString(9, plane);
        }
 
        Integer readProgress = entity.getReadProgress();
        if (readProgress != null) {
            stmt.bindLong(10, readProgress);
        }
 
        Integer tag = entity.getTag();
        if (tag != null) {
            stmt.bindLong(11, tag);
        }
 
        String finish = entity.getFinish();
        if (finish != null) {
            stmt.bindString(12, finish);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Book readEntity(Cursor cursor, int offset) {
        Book entity = new Book( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // StringURL
            cursor.getString(offset + 2), // bookName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // author
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // language
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // introduction
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // addTime
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // type
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // plane
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // readProgress
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // tag
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // finish
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Book entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStringURL(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBookName(cursor.getString(offset + 2));
        entity.setAuthor(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLanguage(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIntroduction(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAddTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setType(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setPlane(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setReadProgress(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setTag(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setFinish(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Book entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Book entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
